rules_version = '2';

// Helper function to check for admin access
function isAdmin() {
  // Allow access if the request is coming from the App Engine service account
  // This is used for server-side operations like migrations.
  return request.auth.token.email == 'jamai-dev@appspot.gserviceaccount.com';
}

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Admin collection - allows authenticated users to check admin status
    match /admins/{userId} {
      allow read: if request.auth != null;
      allow write: if false; // Only manually via Firebase Console
    }
    
    // Users collection
    match /users/{userId} {
      // Allow user to access their own data, OR allow admin access for migrations
      allow read, write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      
      // Search history subcollection - users can read/write their own search history
      match /search_history/{searchId} {
        allow read, create: if request.auth != null && request.auth.uid == userId;
        allow update, delete: if false;
      }
    }
    
    // Credit transactions
    match /credit_transactions/{transactionId} {
      allow read: if request.auth != null && 
                     resource.data.userId == request.auth.uid;
      
      allow create: if request.auth != null && 
                       request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if false;
    }
    
    // App config
    match /config/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    // Analytics Token Usage
    match /analytics_token_usage/{document} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Analytics Team Member Usage
    match /analytics_team_member_usage/{document} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Analytics Project Activity
    match /analytics_project_activity/{document} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Analytics Node Creation
    match /analytics_node_creation/{document} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Analytics Daily - FIXED
    match /analytics_daily/{document} {
      allow write: if request.auth != null && 
                      request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
                     resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Analytics Plans
    match /analytics_plans/{document} {
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      allow write: if false; // Only Cloud Functions
    }

    // Analytics collection for global stats
    match /analytics/{document} {
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      // Allow writes to global_stats for download tracking
      allow update: if document == 'global_stats' && 
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['totalAppDownloads', 'lastDownloadAt']);
      allow create, delete: if false; // Only admins via console
    }

    // Referrals - users can read and create their own referral data
    match /referrals/{referralId} {
      // Allow authenticated users to read any referral (for validation)
      // and create their own referrals
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                       request.resource.data.referrerId == request.auth.uid;
      allow update, delete: if false; // Only backend can update
    }

    // Referral Redemptions - authenticated users can read and create
    match /referral_redemptions/{redemptionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if false; // Only backend can update
    }

    // App Downloads Analytics - track download events
    match /analytics_app_downloads/{downloadId} {
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      allow create: if true; // Allow anyone to log downloads (anonymous users too)
      allow update, delete: if false;
    }
    
    // Cached web searches - shared cache for all authenticated users
    match /cached_searches/{queryHash} {
      // All authenticated users can read the cache (shared across users)
      allow read: if request.auth != null;
      // Only create new cache entries, no updates or deletes
      allow create: if request.auth != null;
      allow update, delete: if false;
    }
  }
}
